inspiration:
- https://abstracta.us/blog/tools/ultimate-list-100-software-testing-quotes/

========

- junior high, playing Assasin's Creed - it crashed
- ???
- our dependance on software - box, laptop, phone, car, lhc
- software is hard - because of the stack
=====

- disclaimer, info + whoami

==============

- QA, validation, testing - I'm gonna talk a bit about QA, and about testing - meaning of those 3

- the business side - how much testing happens at each stage + impact
    - how end user quality is defined?

    - what is the worst case then?
    - which is better? (because rework is more costly at further stages)
    - which is ideal?
---

- so... who should test? (should be rethoritcal at this point)

- only automated testing matters

- the only excuse for not testing is not knwoing how to test

---
can we do better:

- property based tests
- stateful property based tests


---

- qa

    - techiniques
        - tdd
        - bdd
        - pair programming

    - type systems
        - asm
        - C
        - python
        - algebraic datatypes - haskell & rust
        - idris - dependant types

    - ???
        - coq / tla+
        - ???

https://www.youtube.com/results?search_query=tla%2B

================

- ethics - why do we have still so crappy software?

takeaways:
- make your code testable
- test to speed up the pace
- teach how to test

====
- maybe add some screnshots from testing tools? :D
- Linus case? "Given enough eyes all bugs are shallow"
